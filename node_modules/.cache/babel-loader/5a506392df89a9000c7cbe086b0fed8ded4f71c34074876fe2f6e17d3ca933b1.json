{"ast":null,"code":"var _jsxFileName = \"/Users/fahid/Documents/portsite_fahid/src/components/counter-number.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CounterNumber = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const hasFetched = useRef(false); // Prevents multiple API calls\n\n  useEffect(() => {\n    if (!hasFetched.current) {\n      // Ensures it runs only once\n      hasFetched.current = true; // Set before calling API to prevent double fetch\n      async function fetchCounter() {\n        try {\n          let response = await fetch(\"\");\n          let data = await response.json();\n          setCount(data);\n        } catch (error) {\n          console.error(\"Error updating counter:\", error);\n        }\n      }\n      fetchCounter();\n    }\n  }, []); // Empty dependency array ensures it only runs once\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    id: \"counter-number\",\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 12\n  }, this);\n};\n_s(CounterNumber, \"mu1FL8WFN2wYBcalQ7gUMdcWY78=\");\n_c = CounterNumber;\nexport default CounterNumber;\nvar _c;\n$RefreshReg$(_c, \"CounterNumber\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","CounterNumber","_s","count","setCount","hasFetched","current","fetchCounter","response","fetch","data","json","error","console","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fahid/Documents/portsite_fahid/src/components/counter-number.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst CounterNumber = () => {\n    const [count, setCount] = useState(0);\n    const hasFetched = useRef(false); // Prevents multiple API calls\n\n    useEffect(() => {\n        if (!hasFetched.current) { // Ensures it runs only once\n            hasFetched.current = true; // Set before calling API to prevent double fetch\n            async function fetchCounter() {\n                try {\n                    let response = await fetch(\"\");\n                    let data = await response.json();\n                    setCount(data);\n                } catch (error) {\n                    console.error(\"Error updating counter:\", error);\n                }\n            }\n            fetchCounter();\n        }\n    }, []); // Empty dependency array ensures it only runs once\n\n    return <span id=\"counter-number\">{count}</span>;\n};\n\nexport default CounterNumber;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMQ,UAAU,GAAGP,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;EAElCF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACS,UAAU,CAACC,OAAO,EAAE;MAAE;MACvBD,UAAU,CAACC,OAAO,GAAG,IAAI,CAAC,CAAC;MAC3B,eAAeC,YAAYA,CAAA,EAAG;QAC1B,IAAI;UACA,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,EAAE,CAAC;UAC9B,IAAIC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;UAChCP,QAAQ,CAACM,IAAI,CAAC;QAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACnD;MACJ;MACAL,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAAOP,OAAA;IAAMc,EAAE,EAAC,gBAAgB;IAAAC,QAAA,EAAEZ;EAAK;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AACnD,CAAC;AAACjB,EAAA,CArBID,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAuBnB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}